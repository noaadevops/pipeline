pipeline {
    agent any
    
    parameters {
        string(name: 'ProjectKey', defaultValue: 'petclinic', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'petclinic', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://192.168.201.13:9000', description: 'SonarQube server URL')
        string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/noaadevops/pipeline.git', description: 'Git repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'main', description: 'Git branch name')
    }

    environment {
        registry = "noaalinux/petclinic-java"
        registryCredential = 'Jenkins-Docker-Token'
        dockerTag = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                          branches: [[name: "*/${params.GIT_BRANCH}"]],
                          userRemoteConfigs: [[url: "${params.GIT_REPO_URL}", credentialsId: 'Git-pass']], //SWITCHED
                          extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'ci']]])
            }
        }

        stage('Checkout GitHub Repo') {
            steps {
                script {
                    git branch: "${params.GIT_BRANCH}", url: "${params.GIT_REPO_URL}", credentialsId: 'Git-pass'
                }
            }
        }

        stage('Compile Code') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn compile'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn test'
                }
            }
        }

        stage('Build Package') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn -Dmaven.test.failure.ignore=true clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('petclinic-app') {
                    script {
                        echo "Building Docker image: ${registry}:${dockerTag}"
                        dockerImage = docker.build("${registry}:${dockerTag}") //CORRECTED: Build the Docker image and assign to dockerImage
                    }
                }
            }
        }

        stage('Publish Docker Image to DockerHub') {
            steps {
                script {
                    echo "Pushing Docker image: ${registry}:${dockerTag} to DockerHub"
                    docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                        dockerImage.push() //CORRECTED: Push the Docker image to DockerHub
                    }
                }
            }
        }

        stage('Sonar Static Code Analysis') {
            steps {
                dir('petclinic-app') {
                    withCredentials([string(credentialsId: 'jenkins-sonar-token', variable: 'sonar_token')]) {
                        sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${params.ProjectKey} \
                            -Dsonar.projectName=${params.ProjectName} \
                            -Dsonar.host.url=${params.SonarHostUrl} \
                            -Dsonar.login=${sonar_token}
                        """
                    }
                }
            }
        }

       stage('Docker Pull & Deploy') {
    steps {
        script {
            docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                // Use shell script to handle container stopping and removal
                sh """
                # Check if the container is running and stop it
                if docker ps -q --filter "name=petclinic" | grep -q .; then
                    echo "Stopping existing container..."
                    docker stop petclinic
                    echo "Removing existing container..."
                    docker rm petclinic
                fi

                # Optionally, you can add a short delay to ensure the container has stopped
                sleep 5

                # Pull the latest Docker image
                echo "Pulling Docker image: ${registry}:${dockerTag}"
                docker pull ${registry}:${dockerTag}

                # Run the new Docker container
                echo "Running new Docker container..."
                docker run -d -p 8081:8081 --name petclinic ${registry}:${dockerTag}
                """
            }
        }
    }
}

    }

    post {
        success {
            dir('petclinic-app') {
                junit '**/target/surefire-reports/TEST-*.xml'
                archiveArtifacts 'target/*.jar'
            }
        }

        cleanup {
            cleanWs()
        }
    }
}
