pipeline {
    agent any

    parameters {
        string(name: 'GIT_REPO_URL', defaultValue: 'https://github.com/Noah-linux/docker-lab.git', description: 'Git repository URL')
        string(name: 'GIT_BRANCH', defaultValue: 'master', description: 'Git branch name')
    }

    tools {
        maven 'maven3.9.9' // Use Maven version 3.9.9
        jdk 'java' // Use JDK 8
    }

    environment {
        registry = "noaalinux/petclinic-java" // Docker image name
        registryCredential = 'DOCKERHUB-ACCESS_TOKEN' // Jenkins credential ID for DockerHub
        dockerImage = '' // Placeholder for Docker image object
        dockerTag = "${env.BUILD_NUMBER}" // Use build number as Docker tag
    }

    stages {
        stage('Cloning Git') {
            steps {
                git branch: "${params.GIT_BRANCH}", url: "${params.GIT_REPO_URL}" // Clone the Git repository using parameters
            }
        }

        stage('Compile Code') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn compile' // Compile the code without running tests
                }
            }
        }

        stage('Build Package') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn clean install -DskipTests=true' // Build the package without running tests
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('petclinic-app') {
                    script {
                        echo "Building Docker image: ${registry}:${dockerTag}"
                        dockerImage = docker.build("${registry}:${dockerTag}") // Build the Docker image with the build number as the tag
                    }
                }
            }
        }

        stage('Publish Docker Image to DockerHub') {
            steps {
                script {
                    echo "Pushing Docker image: ${registry}:${dockerTag} to DockerHub"
                    docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                        dockerImage.push() // Push the Docker image to DockerHub
                    }
                }
            }
        }

        stage('Remove Local Docker Image') {
            steps {
                sh "docker rmi ${registry}:${dockerTag}" // Remove the local Docker image to free up space
            }
        }

        stage('Docker Pull & Deploy') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                        // Stop any existing container on the same port
                        sh """
                        docker ps -q --filter "name=petclinic" | grep -q . && docker stop petclinic && docker rm petclinic || true
                        """

                        // Pull the Docker image and run the container
                        echo "Pulling Docker image: ${registry}:${dockerTag} from DockerHub"
                        sh """
                        docker pull ${registry}:${dockerTag}
                        docker run -d -p 8081:8081 --name petclinic ${registry}:${dockerTag}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend (
                channel: '#jenkins-build-sonar', // Replace with your desired Slack channel
                color: 'good', // Green color for successful builds
                tokenCredentialId: 'SLACK-TOKEN', // Jenkins credential ID for Slack
                message: "Pipeline Success: ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${BUILD_URL}"
            )
        }

        failure {
            slackSend (
                channel: '#jenkins-build-sonar', // Replace with your desired Slack channel
                color: 'danger', // Red color for failed builds
                tokenCredentialId: 'SLACK-TOKEN', // Jenkins credential ID for Slack
                message: "Pipeline Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER} - ${BUILD_URL}"
            )
        }

        cleanup {
            cleanWs() // Clean up the workspace
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}
