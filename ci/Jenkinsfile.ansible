pipeline {
    agent any

   

    parameters {
        string(name: 'ProjectKey', defaultValue: 'petclinic', description: 'SonarQube project key')
        string(name: 'ProjectName', defaultValue: 'petclinic', description: 'SonarQube project name')
        string(name: 'SonarHostUrl', defaultValue: 'http://192.168.92.182:9000', description: 'SonarQube server URL')
        string(name: 'AppPort', defaultValue: '8081', description: 'Port to run the application')
    }

      environment {
        registry = "noaalinux/petclinic-java" // Docker image name
        registryCredential = 'DOCKERHUB-ACCESS_TOKEN' // Jenkins credential ID for DockerHub
        dockerImage = '' // Placeholder for Docker image object
        dockerTag = "${env.BUILD_NUMBER}" // Use build number as Docker tag
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'master', url: "https://github.com/noaadevops/pipeline.git"
            }
        }

        stage('Unit Test') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn test' // Run unit tests
                }
            }
        }

        stage('Sonar Static Code Analysis') {
            steps {
                dir('petclinic-app') {
                    withCredentials([string(credentialsId: 'jenkins-sonar-token', variable: 'SONAR_TOKEN')]) {
                        sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${params.ProjectKey} \
                            -Dsonar.projectName='${params.ProjectName}' \
                            -Dsonar.host.url=${params.SonarHostUrl} \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Package') {
            steps {
                dir('petclinic-app') {
                    sh 'mvn clean install -DskipTests=true' // Build the package without running tests
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("$DOCKER_IMAGE_NAME", 'petclinic-app')
                }
            }
        }

        stage('Remove Local Docker Image') {
            steps {
                script {
                    sh "docker rmi $DOCKER_IMAGE_NAME" // Remove Docker image from Jenkins server / local
                }
            }
        }

        stage('Docker Pull & Deploy') {
            steps {
                script {
                    // Stop any existing container on the same port
                    sh """
                    docker ps -q --filter "name=petclinic" | grep -q . && docker stop petclinic && docker rm petclinic || true
                    """

                    // Pull the Docker image and run the container
                    sh """
                    docker pull $DOCKER_IMAGE_NAME
                    docker run -d --name petclinic -p ${params.AppPort}:8081 $DOCKER_IMAGE_NAME
                    """
                }
            }
        }
    }

    post {
        success {
            dir('petclinic-app') {
                junit '**/target/surefire-reports/TEST-*.xml' // Archive JUnit test results
                archiveArtifacts 'target/*.jar' // Archive JAR files
            }
        }

        cleanup {
            cleanWs() // Clean up the workspace
        }
    }

    options {
        buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3')) // Keep 3 builds for 1 day
    }
}
